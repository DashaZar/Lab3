#include <iostream>
#include <numeric>  // Для функции gcd (вычисление наибольшего общего делителя)
#include <cmath>    // Для функции pow (возведение в степень)
#include <map>      // Для контейнера map (хранение полиномов)
#include <vector>   // Для контейнера vector (хранение коэффициентов)

using namespace std;

/*
* Предопределенные полиномы для a = 1..10
* Ключ map - значение a (степень в числителе ряда)
* Значение - вектор коэффициентов полинома, начиная со старшей степени
* Например, для a=3: {1, 4, 1} соответствует полиному 1*b^2 + 4*b + 1
*/
const map<int, vector<int>> POLYNOMIALS = {
    {1, {1}},                     // P_1(b) = 1
    {2, {1, 1}},                  // P_2(b) = b + 1
    {3, {1, 4, 1}},               // P_3(b) = b^2 + 4b + 1
    {4, {1, 11, 11, 1}},          // P_4(b) = b^3 + 11b^2 + 11b + 1
    {5, {1, 26, 66, 26, 1}},      // P_5(b) = b^4 + 26b^3 + 66b^2 + 26b + 1
    {6, {1, 57, 302, 302, 57, 1}}, // P_6(b) = b^5 + 57b^4 + 302b^3 + 302b^2 + 57b + 1
    // ... и так далее до a=10
};

/*
* Вычисление значения полинома в точке b с использованием схемы Горнера
* Схема Горнера позволяет вычислить полином с минимальным числом операций:
* P(x) = a0 + x*(a1 + x*(a2 + ... + x*(an-1 + x*an)...))
* 
* @param a - степень в числителе ряда (определяет какой полином использовать)
* @param b - точка, в которой вычисляется полином
* @return значение полинома P_a(b)
*/
long long evaluate_polynomial(int a, int b) {
    // Получаем коэффициенты полинома для заданного a
    const auto& coeffs = POLYNOMIALS.at(a);
    long long result = 0;
    
    // Применяем схему Горнера для эффективного вычисления
    for (int c : coeffs) {
        // На каждом шаге: умножаем текущий результат на b и добавляем следующий коэффициент
        result = result * b + c;
    }
    return result;
}

/*
* Вычисление суммы бесконечного ряда sum(n^a / b^n) в виде несократимой дроби
* Используется формула: S = (P_a(b) * b) / (b - 1)^(a + 1)
* 
* @param a - степень в числителе ряда
* @param b - основание степени в знаменателе
* @return строка с результатом в формате "числитель/знаменатель" или "infinity" при b=1
*/
string compute_series_sum(int a, int b) {
    // При b=1 ряд расходится (сумма бесконечна)
    if (b == 1) return "infinity";

    // Вычисляем числитель: P_a(b) * b
    long long numerator = evaluate_polynomial(a, b) * b;
    
    // Вычисляем знаменатель: (b - 1)^(a + 1)
    long long denominator = pow(b - 1, a + 1);

    // Сокращаем дробь с помощью НОД
    long long common_divisor = gcd(numerator, denominator);
    numerator /= common_divisor;
    denominator /= common_divisor;

    // Возвращаем результат в виде строки
    return to_string(numerator) + "/" + to_string(denominator);
}

/*
* Проверка, что значение находится в допустимом диапазоне [1, 10]
* 
* @param value - проверяемое значение
* @return true если значение допустимо, иначе false
*/
bool is_valid(int value) {
    return value >= 1 && value <= 10;
}

int main() {
    int a, b;  // Входные параметры: a - степень, b - основание

    // Ввод и проверка параметра a
    cout << "Введите a (1-10): ";
    cin >> a;
    if (!is_valid(a)) {
        cerr << "Ошибка: a должно быть от 1 до 10" << endl;
        return 1;  // Возвращаем код ошибки
    }

    // Ввод и проверка параметра b
    cout << "Введите b (1-10): ";
    cin >> b;
    if (!is_valid(b)) {
        cerr << "Ошибка: b должно быть от 1 до 10" << endl;
        return 1;  // Возвращаем код ошибки
    }

    try {
        // Вычисление и вывод результата
        string result = compute_series_sum(a, b);
        cout << "Сумма ряда: " << result << endl;
    } catch (const out_of_range&) {
        // Обработка случая, когда полином для заданного a не найден
        cerr << "Ошибка: неизвестный полином для a=" << a << endl;
        return 1;
    } catch (...) {
        // Обработка всех остальных ошибок
        cerr << "Неизвестная ошибка при вычислениях" << endl;
        return 2;
    }

    return 0;  // Успешное завершение программы
}
